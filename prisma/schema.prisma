// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id @default(autoincrement())
  name              String
  email             String      @unique
  password          String
  createdAt         DateTime    @default(now())
  bio               String?
  
  // Additional fields for profile
  profilePicture String? // URL of profile picture
  coverPhoto     String? // URL of cover photo

  // Messaging System
  messagesSent      Message[]   @relation("SentMessages")
  // messagesReceived  Message[]   @relation("ReceivedMessages")

  // Other fields and relations
  sentRequests      FriendRequest[] @relation("SentRequests")
  receivedRequests  FriendRequest[] @relation("ReceivedRequests")
  
  posts             Post[]
  postLikes         PostLike[]   @relation("UserPostLikes")
  comments          Comment[]    @relation("UserComments")
  chatRooms         ChatRoom[]   @relation("ChatParticipants")
  user1Friends      Friend[]     @relation("User1Friends")
  user2Friends      Friend[]     @relation("User2Friends")

  @@index([email])
}

model Post {
  id         Int        @id @default(autoincrement())
  content    String // Text content of the post
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  comments   Comment[]
  likes      PostLike[]
  mediaUrl   String? // Optional media attachment (image/video)
  visibility String     @default("public") // "public", "friends-only", "private"

  // Additional Indices
  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation("UserComments", fields: [userId], references: [id])
  userId    Int

  // Additional Indices
  @@index([postId, userId])
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation("UserPostLikes", fields: [userId], references: [id])
  userId    Int

  // Unique constraint to prevent duplicate likes
  @@unique([postId, userId])
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId Int
  status     String   @default("pending") // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())

  // Additional Indices
  @@unique([senderId, receiverId])
}

model Friend {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("User1Friends", fields: [user1Id], references: [id])
  user1Id   Int
  user2     User     @relation("User2Friends", fields: [user2Id], references: [id])
  user2Id   Int
  createdAt DateTime @default(now())

  // Additional Indices
  @@unique([user1Id, user2Id])
}


model ChatRoom {
  id           Int       @id @default(autoincrement())
  participants User[]    @relation("ChatParticipants")  // Relationship to User (participants)
  messages     Message[] // Relationship to messages
  createdAt    DateTime  @default(now())  // Timestamp when the chat room is created
  isGroup      Boolean   @default(false)  // Indicates if it's a group chat or 1-to-1 chat
  userIds      Int[]     // Array of user IDs in the chat room (this is handled by the relation)
  name         String?
  // Additional Indices
  @@index([id])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  // receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  // receiverId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  read       Boolean  @default(false)

  // @@index([senderId, receiverId])
}


//model Message {
//  id         Int      @id @default(autoincrement())
//  content    String
//  createdAt  DateTime @default(now())
//  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
//  senderId   Int
//  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
//  receiverId Int
//  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
//  chatRoomId Int
//  read       Boolean  @default(false) // Message read status
//
//  // Additional Indices
//  @@index([senderId, receiverId])
//}
//
//model ChatRoom {
//  id           Int       @id @default(autoincrement())
//  participants User[]    @relation("ChatParticipants")
//  messages     Message[]
//  createdAt    DateTime  @default(now())
//
//  // Additional Indices
//  @@index([id])
//}
//model Message {
//  id         Int      @id @default(autoincrement())
//  content    String   // Content of the message
//  createdAt  DateTime @default(now()) // Timestamp when the message is sent
//  senderId   Int      // ID of the sender
//  sender     User     @relation("SentMessages", fields: [senderId], references: [id]) // Relation to User (sender)
//  chatRoomId Int      // ID of the chat room where the message belongs
//  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id]) // Relation to ChatRoom
//  read       Boolean  @default(false)  // Message read status
//
//  // Additional Indices
//  @@index([senderId, chatRoomId])  // Adding index for optimized querying
//}